package player;

import tag.Data.Point;

import org.neuroph.core.NeuralNetwork;
import org.neuroph.nnet.MultiLayerPerceptron;

import tag.Player;
import tag.Viewer;

public class SimplePlayer extends Player {
	private static NeuralNetwork neuralNetwork;
	public SimplePlayer(){
		this.neuralNetwork=new MultiLayerPerceptron(30*30,100,30*30);
		
	}
	
	

	@Override
	public Point play(Viewer v) {
		this.neuralNetwork.setInput(this.getDoubleArray(v));
		neuralNetwork.calculate();
		double[] output=neuralNetwork.getOutput();
		
		return getPointFromOutput(v,output);
	}
	
	private Point getPointFromOutput(Viewer v,double[] output){
		//To Do

		int w=v.getWidth(),h=v.getHeigth();
		int maxV=0;
		
		for(int i=0;i<output.length;i++){

			int x=i/h , y=i%h;
			
		}
		
		
		return null;
	}
	
	private double[] getDoubleArray(Viewer v){
		int w=v.getWidth(),h=v.getHeigth();
		
		double[] ret=new double[w*h];
		
		for(int i=0;i<w*h;i++){
			int x=i/h , y=i%h;
			ret[i]=v.getValue(x, y);
		}
		
		return ret;
	}

}
